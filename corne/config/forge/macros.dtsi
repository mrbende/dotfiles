/ {
  macros {
    /*
      Temporarily switches to a layer (&mo) while a modifier is held. This is
      an implementation of QMK's `LM()` using ZMK's parameterized macros.

      Params:
        1. Layer to switch to
        2. Modifier to press while layer is active

      Example:
        `&lm L1 LSHIFT`
     */
    /omit-if-no-ref/ lm: lm {
      wait-ms = <0>;
      tap-ms = <0>;
      compatible = "zmk,behavior-macro-two-param";
      #binding-cells = <2>;
      bindings = <&macro_param_1to1>,
        <&macro_press &mo MACRO_PLACEHOLDER>,
        <&macro_param_2to1>,
        <&macro_press &kp MACRO_PLACEHOLDER>,
        <&macro_pause_for_release>,
        <&macro_param_2to1>,
        <&macro_release &kp MACRO_PLACEHOLDER>,
        <&macro_param_1to1>,
        <&macro_release &mo MACRO_PLACEHOLDER>;
    };

    /*
      Practically identical to &sl, except it triggers a `K_CANCEL` right before to clear
      any active smart layers. This prevents nested/stacked layer activation when needed.

      Params:
        1. Layer to switch to

      Example:
        `&csl L1`
     */
    /omit-if-no-ref/ csl: clear_sl {
      wait-ms = <0>;
      tap-ms = <0>;
      compatible = "zmk,behavior-macro-one-param";
      #binding-cells = <1>;
      bindings = <&macro_tap &kp K_CANCEL>,
        <&macro_param_1to1>,
        <&macro_press &sl MACRO_PLACEHOLDER>,
        <&macro_pause_for_release>,
        <&macro_param_1to1>,
        <&macro_release &sl MACRO_PLACEHOLDER>;
    };

    /*
      Practically identical to &mo, except it triggers a `K_CANCEL` right before to clear
      any active smart layers. This prevents nested/stacked layer activation when needed.
      It's also useful to maintain more consistent expectations when holding a cancel/exit layer
      key from a smart layer.

      Params:
        1. Layer to switch to

      Example:
        `&cmo L1`
     */
    /omit-if-no-ref/ cmo: clear_mo {
      wait-ms = <0>;
      tap-ms = <0>;
      compatible = "zmk,behavior-macro-one-param";
      #binding-cells = <1>;
      bindings = <&macro_tap &kp K_CANCEL>,
        <&macro_param_1to1>,
        <&macro_press &mo MACRO_PLACEHOLDER>,
        <&macro_pause_for_release>,
        <&macro_param_1to1>,
        <&macro_release &mo MACRO_PLACEHOLDER>;
    };

    /* 
      Macro for triggering "go to definition" in your editor 
    */
    /omit-if-no-ref/ goto_def: goto_definition {
      compatible = "zmk,behavior-macro";
      #binding-cells = <0>;
      bindings = <&kp LG(LBKT)>;
      label = "GOTO_DEFINITION";
    };

    /* 
      Macro for tmux vertical split (Ctrl+A + |) 
    */
    /omit-if-no-ref/ tmux_vsplit: tmux_vertical_split {
      compatible = "zmk,behavior-macro";
      #binding-cells = <0>;
      bindings = 
        <&macro_press &kp LCTRL>,
        <&macro_tap &kp A>,
        <&macro_release &kp LCTRL>,
        <&macro_tap &kp LS(PIPE)>;
      label = "TMUX_VERTICAL_SPLIT";
    };

    /* 
      Macro for tmux horizontal split (Ctrl+A + -) 
    */
    /omit-if-no-ref/ tmux_hsplit: tmux_horizontal_split {
      compatible = "zmk,behavior-macro";
      #binding-cells = <0>;
      bindings = 
        <&macro_press &kp LCTRL>,
        <&macro_tap &kp A>,
        <&macro_release &kp LCTRL>,
        <&macro_tap &kp MINUS>;
      label = "TMUX_HORIZONTAL_SPLIT";
    };

    /* 
      Macro for vim save (:w) 
    */
    /omit-if-no-ref/ vim_save: vim_save {
      compatible = "zmk,behavior-macro";
      #binding-cells = <0>;
      bindings = 
        <&macro_tap &kp COLON>,
        <&macro_tap &kp W>,
        <&macro_tap &kp ENTER>;
      label = "VIM_SAVE";
    };

    /* 
      Macro for vim save and quit (:wq) 
    */
    /omit-if-no-ref/ vim_save_quit: vim_save_quit {
      compatible = "zmk,behavior-macro";
      #binding-cells = <0>;
      bindings = 
        <&macro_tap &kp COLON>,
        <&macro_tap &kp W>,
        <&macro_tap &kp Q>,
        <&macro_tap &kp ENTER>;
      label = "VIM_SAVE_QUIT";
    };
    /* ────────────  Vim window-split helpers  ──────────── */

    /omit-if-no-ref/ vim_split_horz: vim_split_horz {
        compatible      = "zmk,behavior-macro";
        #binding-cells  = <0>;
        bindings =
            <&macro_press  &kp LCTRL>,
            <&macro_tap    &kp W>,
            <&macro_release&kp LCTRL>,
            <&macro_tap    &kp S>;
        label = "VIM_SPLIT_HORZ";
    };

    /omit-if-no-ref/ vim_split_vert: vim_split_vert {
        compatible      = "zmk,behavior-macro";
        #binding-cells  = <0>;
        bindings =
            <&macro_press  &kp LCTRL>,
            <&macro_tap    &kp W>,
            <&macro_release&kp LCTRL>,
            <&macro_tap    &kp V>;
        label = "VIM_SPLIT_VERT";
    };

    /* ────────────  Tmux helpers (prefix = Ctrl-A)  ──────────── */

    /omit-if-no-ref/ tmux_next: tmux_next {
        compatible      = "zmk,behavior-macro";
        #binding-cells  = <0>;
        bindings =
            <&macro_press  &kp LCTRL>,
            <&macro_tap    &kp A>,
            <&macro_release&kp LCTRL>,
            <&macro_tap    &kp N>;
        label = "TMUX_NEXT_WINDOW";
    };

    /omit-if-no-ref/ tmux_prev: tmux_prev {
        compatible      = "zmk,behavior-macro";
        #binding-cells  = <0>;
        bindings =
            <&macro_press  &kp LCTRL>,
            <&macro_tap    &kp A>,
            <&macro_release&kp LCTRL>,
            <&macro_tap    &kp P>;
        label = "TMUX_PREV_WINDOW";
    };

    /omit-if-no-ref/ tmux_sess: tmux_sess {
        compatible      = "zmk,behavior-macro";
        #binding-cells  = <0>;
        bindings =
            <&macro_press  &kp LCTRL>,
            <&macro_tap    &kp A>,
            <&macro_release&kp LCTRL>,
            <&macro_tap    &kp F>;
        label = "TMUX_SESSIONIZER";
    };

    /omit-if-no-ref/ tmux_copy: tmux_copy {
        compatible      = "zmk,behavior-macro";
        #binding-cells  = <0>;
        bindings =
            <&macro_press  &kp LCTRL>,
            <&macro_tap    &kp A>,
            <&macro_release&kp LCTRL>,
            <&macro_tap    &kp V>;
        label = "TMUX_COPY_MODE";
    };
  };
};
